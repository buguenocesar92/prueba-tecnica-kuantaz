{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "API de Beneficios - Kuantaz",
		"description": "Colecci√≥n de Postman para la API de Beneficios de la prueba t√©cnica de Kuantaz.\n\n## Endpoints Disponibles:\n- **Beneficios Procesados**: Endpoint principal que procesa y agrupa beneficios por a√±o\n\n## Configuraci√≥n:\n- **Base URL**: http://127.0.0.1:8000\n- **Timeout**: 30 segundos\n- **Content-Type**: application/json",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "üéØ Endpoints Principales",
			"item": [
				{
					"name": "Beneficios Procesados",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar que la respuesta sea exitosa",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verificar que la respuesta sea JSON",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Verificar estructura de la respuesta",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    ",
									"    if (jsonData.length > 0) {",
									"        const firstItem = jsonData[0];",
									"        pm.expect(firstItem).to.have.property('ano');",
									"        pm.expect(firstItem).to.have.property('total_monto');",
									"        pm.expect(firstItem).to.have.property('num');",
									"        pm.expect(firstItem).to.have.property('beneficios');",
									"        pm.expect(firstItem.beneficios).to.be.an('array');",
									"    }",
									"});",
									"",
									"// Verificar que los a√±os est√©n ordenados descendentemente",
									"pm.test(\"Years are sorted in descending order\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.length > 1) {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            pm.expect(parseInt(jsonData[i].ano)).to.be.at.least(parseInt(jsonData[i + 1].ano));",
									"        }",
									"    }",
									"});",
									"",
									"// Mostrar resumen en consola",
									"const responseJson = pm.response.json();",
									"if (responseJson && responseJson.length > 0) {",
									"    console.log(`üìä Resumen de Beneficios Procesados:`);",
									"    console.log(`üìÖ A√±os procesados: ${responseJson.length}`);",
									"    responseJson.forEach(year => {",
									"        console.log(`   ${year.ano}: ${year.num} beneficios, $${year.total_monto.toLocaleString()}`);",
									"    });",
									"} else {",
									"    console.log(`‚ùå No se encontraron datos o respuesta vac√≠a`);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/beneficios-procesados",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"beneficios-procesados"
							]
						},
						"description": "**Endpoint principal** que procesa y agrupa los beneficios por a√±o.\n\n### Funcionalidades:\n- ‚úÖ Consume 3 APIs externas (beneficios, filtros, fichas)\n- ‚úÖ Filtra beneficios por montos m√≠nimos y m√°ximos\n- ‚úÖ Agrupa por a√±o y calcula totales\n- ‚úÖ Ordena por a√±o descendente\n- ‚úÖ Incluye informaci√≥n de fichas\n\n### Respuesta esperada:\n```json\n[\n  {\n    \"ano\": \"2023\",\n    \"total_monto\": 295608,\n    \"num\": 8,\n    \"beneficios\": [\n      {\n        \"id_programa\": 147,\n        \"monto\": 40656,\n        \"fecha_recepcion\": \"09/11/2023\",\n        \"fecha\": \"2023-11-09\",\n        \"ano\": \"2023\",\n        \"view\": true,\n        \"ficha\": {\n          \"id\": 922,\n          \"nombre\": \"Emprende\",\n          \"id_programa\": 147,\n          \"url\": \"emprende\",\n          \"categoria\": \"trabajo\",\n          \"descripcion\": \"Fondos concursables para nuevos negocios\"\n        }\n      }\n    ]\n  },\n  {\n    \"ano\": \"2022\",\n    \"total_monto\": 49254,\n    \"num\": 1,\n    \"beneficios\": [\n      {\n        \"id_programa\": 130,\n        \"monto\": 49254,\n        \"fecha_recepcion\": \"11/10/2022\",\n        \"fecha\": \"2022-10-11\",\n        \"ano\": \"2022\",\n        \"view\": true,\n        \"ficha\": {\n          \"id\": 2042,\n          \"nombre\": \"Subsidio Familiar (SUF)\",\n          \"id_programa\": 130,\n          \"url\": \"subsidio_familiar_suf\",\n          \"categoria\": \"bonos\",\n          \"descripcion\": \"Beneficio econ√≥mico mensual entregado a madres, padres o tutores que no cuentan con previsi√≥n social.\"\n        }\n      }\n    ]\n  }\n]\n```"
					},
					"response": [
						{
							"name": "Respuesta Exitosa",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/beneficios-procesados",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"beneficios-procesados"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"ano\": \"2023\",\n    \"total_monto\": 295608,\n    \"num\": 8,\n    \"beneficios\": [\n      {\n        \"id_programa\": 147,\n        \"monto\": 40656,\n        \"fecha_recepcion\": \"09/11/2023\",\n        \"fecha\": \"2023-11-09\",\n        \"ano\": \"2023\",\n        \"view\": true,\n        \"ficha\": {\n          \"id\": 922,\n          \"nombre\": \"Emprende\",\n          \"id_programa\": 147,\n          \"url\": \"emprende\",\n          \"categoria\": \"trabajo\",\n          \"descripcion\": \"Fondos concursables para nuevos negocios\"\n        }\n      }\n    ]\n  },\n  {\n    \"ano\": \"2022\",\n    \"total_monto\": 49254,\n    \"num\": 1,\n    \"beneficios\": [\n      {\n        \"id_programa\": 130,\n        \"monto\": 49254,\n        \"fecha_recepcion\": \"11/10/2022\",\n        \"fecha\": \"2022-10-11\",\n        \"ano\": \"2022\",\n        \"view\": true,\n        \"ficha\": {\n          \"id\": 2042,\n          \"nombre\": \"Subsidio Familiar (SUF)\",\n          \"id_programa\": 130,\n          \"url\": \"subsidio_familiar_suf\",\n          \"categoria\": \"bonos\",\n          \"descripcion\": \"Beneficio econ√≥mico mensual entregado a madres, padres o tutores que no cuentan con previsi√≥n social.\"\n        }\n      }\n    ]\n  }\n]"
						}
					]
				}
			],
			"description": "Endpoints principales de la API de Beneficios"
		},
		{
			"name": "üß™ Tests de Validaci√≥n",
			"item": [
				{
					"name": "Test de Conectividad",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test b√°sico de conectividad",
									"pm.test(\"Server is responding\", function () {",
									"    pm.response.to.not.be.error;",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"// Verificar headers b√°sicos",
									"pm.test(\"Has proper headers\", function () {",
									"    pm.response.to.have.header('Content-Type');",
									"});",
									"",
									"console.log(`üîó Conectividad OK - Tiempo de respuesta: ${pm.response.responseTime}ms`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/beneficios-procesados",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"beneficios-procesados"
							]
						},
						"description": "**Test b√°sico de conectividad** para verificar que el servidor est√© funcionando correctamente.\n\n### Validaciones:\n- ‚úÖ Servidor responde\n- ‚úÖ Tiempo de respuesta aceptable (< 5s)\n- ‚úÖ Headers correctos\n- ‚úÖ Sin errores de conexi√≥n"
					},
					"response": []
				},
				{
					"name": "Test de Performance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests de performance",
									"pm.test(\"Response time is under 10 seconds\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test(\"Response time is under 5 seconds (optimal)\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"// An√°lisis de performance",
									"const responseTime = pm.response.responseTime;",
									"let performance = '';",
									"if (responseTime < 1000) performance = 'üöÄ Excelente';",
									"else if (responseTime < 3000) performance = '‚úÖ Bueno';",
									"else if (responseTime < 5000) performance = '‚ö†Ô∏è Aceptable';",
									"else performance = 'üêå Lento';",
									"",
									"console.log(`‚è±Ô∏è Performance: ${performance} (${responseTime}ms)`);",
									"",
									"// Verificar tama√±o de respuesta",
									"const responseSize = pm.response.responseSize;",
									"console.log(`üì¶ Tama√±o de respuesta: ${responseSize} bytes`);",
									"",
									"pm.test(\"Response size is reasonable\", function () {",
									"    pm.expect(responseSize).to.be.below(1000000); // < 1MB",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/beneficios-procesados",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"beneficios-procesados"
							]
						},
						"description": "**Test de performance** para evaluar los tiempos de respuesta y el tama√±o de los datos.\n\n### M√©tricas evaluadas:\n- ‚è±Ô∏è Tiempo de respuesta (objetivo: < 5s)\n- üì¶ Tama√±o de respuesta (objetivo: < 1MB)\n- üéØ Clasificaci√≥n de performance\n- üìä An√°lisis detallado en consola"
					},
					"response": []
				}
			],
			"description": "Colecci√≥n de tests para validar el funcionamiento y performance de la API"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script que se ejecuta antes de cada request",
					"console.log(`üöÄ Ejecutando: ${pm.info.requestName}`);",
					"console.log(`üìç URL: ${pm.request.url}`);",
					"console.log(`‚è∞ Timestamp: ${new Date().toISOString()}`);",
					"",
					"// Verificar que la variable base_url est√© configurada",
					"if (!pm.environment.get('base_url') && !pm.globals.get('base_url')) {",
					"    console.warn('‚ö†Ô∏è Variable base_url no configurada. Usando valor por defecto.');",
					"    pm.globals.set('base_url', 'http://127.0.0.1:8000');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script que se ejecuta despu√©s de cada request",
					"console.log(`‚úÖ Completado: ${pm.info.requestName}`);",
					"console.log(`üìä Status: ${pm.response.status} ${pm.response.code}`);",
					"console.log(`‚è±Ô∏è Tiempo: ${pm.response.responseTime}ms`);",
					"console.log('‚îÄ'.repeat(50));"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8000",
			"type": "string"
		}
	]
} 